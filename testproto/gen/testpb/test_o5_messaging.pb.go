// Code generated by protoc-gen-go-o5-messaging. DO NOT EDIT.
// versions:
// - protoc-gen-go-o5-messaging 0.0.0
// source: test/v1/test.proto

package testpb

import (
	context "context"
	messaging_j5pb "github.com/pentops/j5/gen/j5/messaging/v1/messaging_j5pb"
	messaging_pb "github.com/pentops/o5-messaging/gen/o5/messaging/v1/messaging_pb"
	o5msg "github.com/pentops/o5-messaging/o5msg"
)

// Service: RequestTopic
// Expose Request Metadata
func (msg *RequestMessage) SetJ5RequestMetadata(md *messaging_j5pb.RequestMetadata) {
	msg.Request = md
}
func (msg *RequestMessage) GetJ5RequestMetadata() *messaging_j5pb.RequestMetadata {
	return msg.Request
}

type RequestTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewRequestTopicTxSender[C any](sender o5msg.TxSender[C]) *RequestTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "test.v1.RequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Request",
				Message: (*RequestMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &RequestTopicTxSender[C]{sender: sender}
}

type RequestTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewRequestTopicCollector[C any](collector o5msg.Collector[C]) *RequestTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "test.v1.RequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Request",
				Message: (*RequestMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &RequestTopicCollector[C]{collector: collector}
}

type RequestTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewRequestTopicPublisher(publisher o5msg.Publisher) *RequestTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "test.v1.RequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Request",
				Message: (*RequestMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &RequestTopicPublisher{publisher: publisher}
}

// Method: Request

func (msg *RequestMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "test.v1.RequestTopic",
		GrpcMethod:       "Request",
		Headers:          map[string]string{},
		DestinationTopic: "reqres",
	}
	if msg.Request != nil {
		header.Extension = &messaging_pb.Message_Request_{
			Request: &messaging_pb.Message_Request{
				ReplyTo: msg.Request.ReplyTo,
			},
		}
	}
	return header
}

func (send RequestTopicTxSender[C]) Request(ctx context.Context, sendContext C, msg *RequestMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect RequestTopicCollector[C]) Request(sendContext C, msg *RequestMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish RequestTopicPublisher) Request(ctx context.Context, msg *RequestMessage) error {
	return publish.publisher.Publish(ctx, msg)
}

// Service: ReplyTopic
// Expose Request Metadata
func (msg *ReplyMessage) SetJ5RequestMetadata(md *messaging_j5pb.RequestMetadata) {
	msg.Request = md
}
func (msg *ReplyMessage) GetJ5RequestMetadata() *messaging_j5pb.RequestMetadata {
	return msg.Request
}

type ReplyTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewReplyTopicTxSender[C any](sender o5msg.TxSender[C]) *ReplyTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "test.v1.ReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Reply",
				Message: (*ReplyMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &ReplyTopicTxSender[C]{sender: sender}
}

type ReplyTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewReplyTopicCollector[C any](collector o5msg.Collector[C]) *ReplyTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "test.v1.ReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Reply",
				Message: (*ReplyMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &ReplyTopicCollector[C]{collector: collector}
}

type ReplyTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewReplyTopicPublisher(publisher o5msg.Publisher) *ReplyTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "test.v1.ReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Reply",
				Message: (*ReplyMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &ReplyTopicPublisher{publisher: publisher}
}

// Method: Reply

func (msg *ReplyMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "test.v1.ReplyTopic",
		GrpcMethod:       "Reply",
		Headers:          map[string]string{},
		DestinationTopic: "reqres",
	}
	if msg.Request != nil {
		header.Extension = &messaging_pb.Message_Reply_{
			Reply: &messaging_pb.Message_Reply{
				ReplyTo: msg.Request.ReplyTo,
			},
		}
	}
	return header
}

func (send ReplyTopicTxSender[C]) Reply(ctx context.Context, sendContext C, msg *ReplyMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect ReplyTopicCollector[C]) Reply(sendContext C, msg *ReplyMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish ReplyTopicPublisher) Reply(ctx context.Context, msg *ReplyMessage) error {
	return publish.publisher.Publish(ctx, msg)
}

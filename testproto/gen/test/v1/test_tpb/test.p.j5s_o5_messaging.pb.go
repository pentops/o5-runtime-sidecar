// Code generated by protoc-gen-go-o5-messaging. DO NOT EDIT.
// versions:
// - protoc-gen-go-o5-messaging 0.0.0
// source: test/v1/topic/test.p.j5s.proto

package test_tpb

import (
	context "context"
	messaging_j5pb "github.com/pentops/j5/gen/j5/messaging/v1/messaging_j5pb"
	messaging_pb "github.com/pentops/o5-messaging/gen/o5/messaging/v1/messaging_pb"
	o5msg "github.com/pentops/o5-messaging/o5msg"
)

// Service: TestPublishTopic
// Method: Foo

func (msg *FooMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "test.v1.topic.TestPublishTopic",
		GrpcMethod:       "Foo",
		Headers:          map[string]string{},
		DestinationTopic: "test_publish",
	}
	return header
}

type TestPublishTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewTestPublishTopicTxSender[C any](sender o5msg.TxSender[C]) *TestPublishTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.TestPublishTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Foo",
				Message: (*FooMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TestPublishTopicTxSender[C]{sender: sender}
}

type TestPublishTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewTestPublishTopicCollector[C any](collector o5msg.Collector[C]) *TestPublishTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.TestPublishTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Foo",
				Message: (*FooMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TestPublishTopicCollector[C]{collector: collector}
}

type TestPublishTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewTestPublishTopicPublisher(publisher o5msg.Publisher) *TestPublishTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.TestPublishTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Foo",
				Message: (*FooMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TestPublishTopicPublisher{publisher: publisher}
}

// Method: Foo

func (send TestPublishTopicTxSender[C]) Foo(ctx context.Context, sendContext C, msg *FooMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect TestPublishTopicCollector[C]) Foo(sendContext C, msg *FooMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish TestPublishTopicPublisher) Foo(ctx context.Context, msg *FooMessage) error {
	return publish.publisher.Publish(ctx, msg)
}

// Service: TestReqResRequestTopic
// Expose Request Metadata
func (msg *TestReqResRequestMessage) SetJ5RequestMetadata(md *messaging_j5pb.RequestMetadata) {
	msg.Request = md
}
func (msg *TestReqResRequestMessage) GetJ5RequestMetadata() *messaging_j5pb.RequestMetadata {
	return msg.Request
}

// Method: TestReqResRequest

func (msg *TestReqResRequestMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "test.v1.topic.TestReqResRequestTopic",
		GrpcMethod:       "TestReqResRequest",
		Headers:          map[string]string{},
		DestinationTopic: "test_req_res",
	}
	if msg.Request != nil {
		header.Extension = &messaging_pb.Message_Request_{
			Request: &messaging_pb.Message_Request{
				ReplyTo: msg.Request.ReplyTo,
			},
		}
	} else {
		header.Extension = &messaging_pb.Message_Request_{
			Request: &messaging_pb.Message_Request{
				ReplyTo: "",
			},
		}
	}
	return header
}

type TestReqResRequestTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewTestReqResRequestTopicTxSender[C any](sender o5msg.TxSender[C]) *TestReqResRequestTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.TestReqResRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TestReqResRequest",
				Message: (*TestReqResRequestMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TestReqResRequestTopicTxSender[C]{sender: sender}
}

type TestReqResRequestTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewTestReqResRequestTopicCollector[C any](collector o5msg.Collector[C]) *TestReqResRequestTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.TestReqResRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TestReqResRequest",
				Message: (*TestReqResRequestMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TestReqResRequestTopicCollector[C]{collector: collector}
}

type TestReqResRequestTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewTestReqResRequestTopicPublisher(publisher o5msg.Publisher) *TestReqResRequestTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.TestReqResRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TestReqResRequest",
				Message: (*TestReqResRequestMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TestReqResRequestTopicPublisher{publisher: publisher}
}

// Method: TestReqResRequest

func (send TestReqResRequestTopicTxSender[C]) TestReqResRequest(ctx context.Context, sendContext C, msg *TestReqResRequestMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect TestReqResRequestTopicCollector[C]) TestReqResRequest(sendContext C, msg *TestReqResRequestMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish TestReqResRequestTopicPublisher) TestReqResRequest(ctx context.Context, msg *TestReqResRequestMessage) error {
	return publish.publisher.Publish(ctx, msg)
}

// Service: TestReqResReplyTopic
// Expose Request Metadata
func (msg *TestReqResReplyMessage) SetJ5RequestMetadata(md *messaging_j5pb.RequestMetadata) {
	msg.Request = md
}
func (msg *TestReqResReplyMessage) GetJ5RequestMetadata() *messaging_j5pb.RequestMetadata {
	return msg.Request
}

// Method: TestReqResReply

func (msg *TestReqResReplyMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "test.v1.topic.TestReqResReplyTopic",
		GrpcMethod:       "TestReqResReply",
		Headers:          map[string]string{},
		DestinationTopic: "test_req_res",
	}
	if msg.Request != nil {
		header.Extension = &messaging_pb.Message_Reply_{
			Reply: &messaging_pb.Message_Reply{
				ReplyTo: msg.Request.ReplyTo,
			},
		}
	}
	return header
}

type TestReqResReplyTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewTestReqResReplyTopicTxSender[C any](sender o5msg.TxSender[C]) *TestReqResReplyTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.TestReqResReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TestReqResReply",
				Message: (*TestReqResReplyMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TestReqResReplyTopicTxSender[C]{sender: sender}
}

type TestReqResReplyTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewTestReqResReplyTopicCollector[C any](collector o5msg.Collector[C]) *TestReqResReplyTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.TestReqResReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TestReqResReply",
				Message: (*TestReqResReplyMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TestReqResReplyTopicCollector[C]{collector: collector}
}

type TestReqResReplyTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewTestReqResReplyTopicPublisher(publisher o5msg.Publisher) *TestReqResReplyTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "test.v1.topic.TestReqResReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TestReqResReply",
				Message: (*TestReqResReplyMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TestReqResReplyTopicPublisher{publisher: publisher}
}

// Method: TestReqResReply

func (send TestReqResReplyTopicTxSender[C]) TestReqResReply(ctx context.Context, sendContext C, msg *TestReqResReplyMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect TestReqResReplyTopicCollector[C]) TestReqResReply(sendContext C, msg *TestReqResReplyMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish TestReqResReplyTopicPublisher) TestReqResReply(ctx context.Context, msg *TestReqResReplyMessage) error {
	return publish.publisher.Publish(ctx, msg)
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: test/v1/topic/test.p.j5s.proto

package test_tpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TestPublishTopic_Foo_FullMethodName = "/test.v1.topic.TestPublishTopic/Foo"
)

// TestPublishTopicClient is the client API for TestPublishTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestPublishTopicClient interface {
	Foo(ctx context.Context, in *FooMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type testPublishTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTestPublishTopicClient(cc grpc.ClientConnInterface) TestPublishTopicClient {
	return &testPublishTopicClient{cc}
}

func (c *testPublishTopicClient) Foo(ctx context.Context, in *FooMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TestPublishTopic_Foo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestPublishTopicServer is the server API for TestPublishTopic service.
// All implementations must embed UnimplementedTestPublishTopicServer
// for forward compatibility
type TestPublishTopicServer interface {
	Foo(context.Context, *FooMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTestPublishTopicServer()
}

// UnimplementedTestPublishTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTestPublishTopicServer struct {
}

func (UnimplementedTestPublishTopicServer) Foo(context.Context, *FooMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Foo not implemented")
}
func (UnimplementedTestPublishTopicServer) mustEmbedUnimplementedTestPublishTopicServer() {}

// UnsafeTestPublishTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestPublishTopicServer will
// result in compilation errors.
type UnsafeTestPublishTopicServer interface {
	mustEmbedUnimplementedTestPublishTopicServer()
}

func RegisterTestPublishTopicServer(s grpc.ServiceRegistrar, srv TestPublishTopicServer) {
	s.RegisterService(&TestPublishTopic_ServiceDesc, srv)
}

func _TestPublishTopic_Foo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPublishTopicServer).Foo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestPublishTopic_Foo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPublishTopicServer).Foo(ctx, req.(*FooMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TestPublishTopic_ServiceDesc is the grpc.ServiceDesc for TestPublishTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestPublishTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.v1.topic.TestPublishTopic",
	HandlerType: (*TestPublishTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Foo",
			Handler:    _TestPublishTopic_Foo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/v1/topic/test.p.j5s.proto",
}

const (
	TestReqResRequestTopic_TestReqResRequest_FullMethodName = "/test.v1.topic.TestReqResRequestTopic/TestReqResRequest"
)

// TestReqResRequestTopicClient is the client API for TestReqResRequestTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestReqResRequestTopicClient interface {
	TestReqResRequest(ctx context.Context, in *TestReqResRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type testReqResRequestTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTestReqResRequestTopicClient(cc grpc.ClientConnInterface) TestReqResRequestTopicClient {
	return &testReqResRequestTopicClient{cc}
}

func (c *testReqResRequestTopicClient) TestReqResRequest(ctx context.Context, in *TestReqResRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TestReqResRequestTopic_TestReqResRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestReqResRequestTopicServer is the server API for TestReqResRequestTopic service.
// All implementations must embed UnimplementedTestReqResRequestTopicServer
// for forward compatibility
type TestReqResRequestTopicServer interface {
	TestReqResRequest(context.Context, *TestReqResRequestMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTestReqResRequestTopicServer()
}

// UnimplementedTestReqResRequestTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTestReqResRequestTopicServer struct {
}

func (UnimplementedTestReqResRequestTopicServer) TestReqResRequest(context.Context, *TestReqResRequestMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestReqResRequest not implemented")
}
func (UnimplementedTestReqResRequestTopicServer) mustEmbedUnimplementedTestReqResRequestTopicServer() {
}

// UnsafeTestReqResRequestTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestReqResRequestTopicServer will
// result in compilation errors.
type UnsafeTestReqResRequestTopicServer interface {
	mustEmbedUnimplementedTestReqResRequestTopicServer()
}

func RegisterTestReqResRequestTopicServer(s grpc.ServiceRegistrar, srv TestReqResRequestTopicServer) {
	s.RegisterService(&TestReqResRequestTopic_ServiceDesc, srv)
}

func _TestReqResRequestTopic_TestReqResRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReqResRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReqResRequestTopicServer).TestReqResRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReqResRequestTopic_TestReqResRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReqResRequestTopicServer).TestReqResRequest(ctx, req.(*TestReqResRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TestReqResRequestTopic_ServiceDesc is the grpc.ServiceDesc for TestReqResRequestTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestReqResRequestTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.v1.topic.TestReqResRequestTopic",
	HandlerType: (*TestReqResRequestTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestReqResRequest",
			Handler:    _TestReqResRequestTopic_TestReqResRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/v1/topic/test.p.j5s.proto",
}

const (
	TestReqResReplyTopic_TestReqResReply_FullMethodName = "/test.v1.topic.TestReqResReplyTopic/TestReqResReply"
)

// TestReqResReplyTopicClient is the client API for TestReqResReplyTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestReqResReplyTopicClient interface {
	TestReqResReply(ctx context.Context, in *TestReqResReplyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type testReqResReplyTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTestReqResReplyTopicClient(cc grpc.ClientConnInterface) TestReqResReplyTopicClient {
	return &testReqResReplyTopicClient{cc}
}

func (c *testReqResReplyTopicClient) TestReqResReply(ctx context.Context, in *TestReqResReplyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TestReqResReplyTopic_TestReqResReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestReqResReplyTopicServer is the server API for TestReqResReplyTopic service.
// All implementations must embed UnimplementedTestReqResReplyTopicServer
// for forward compatibility
type TestReqResReplyTopicServer interface {
	TestReqResReply(context.Context, *TestReqResReplyMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTestReqResReplyTopicServer()
}

// UnimplementedTestReqResReplyTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTestReqResReplyTopicServer struct {
}

func (UnimplementedTestReqResReplyTopicServer) TestReqResReply(context.Context, *TestReqResReplyMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestReqResReply not implemented")
}
func (UnimplementedTestReqResReplyTopicServer) mustEmbedUnimplementedTestReqResReplyTopicServer() {}

// UnsafeTestReqResReplyTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestReqResReplyTopicServer will
// result in compilation errors.
type UnsafeTestReqResReplyTopicServer interface {
	mustEmbedUnimplementedTestReqResReplyTopicServer()
}

func RegisterTestReqResReplyTopicServer(s grpc.ServiceRegistrar, srv TestReqResReplyTopicServer) {
	s.RegisterService(&TestReqResReplyTopic_ServiceDesc, srv)
}

func _TestReqResReplyTopic_TestReqResReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReqResReplyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReqResReplyTopicServer).TestReqResReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReqResReplyTopic_TestReqResReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReqResReplyTopicServer).TestReqResReply(ctx, req.(*TestReqResReplyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TestReqResReplyTopic_ServiceDesc is the grpc.ServiceDesc for TestReqResReplyTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestReqResReplyTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.v1.topic.TestReqResReplyTopic",
	HandlerType: (*TestReqResReplyTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestReqResReply",
			Handler:    _TestReqResReplyTopic_TestReqResReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/v1/topic/test.p.j5s.proto",
}
